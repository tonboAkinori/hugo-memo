<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tonbo</title>
    <link>https://tonboAkinori.github.io/hugo-memo/</link>
    <description>Recent content on Tonbo</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 03 Oct 2021 02:41:21 +0000</lastBuildDate><atom:link href="https://tonboAkinori.github.io/hugo-memo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GCC</title>
      <link>https://tonboAkinori.github.io/hugo-memo/gcc/001-gcc/</link>
      <pubDate>Tue, 29 Dec 2020 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/gcc/001-gcc/</guid>
      <description>ドキュメント https://gcc.gnu.org/onlinedocs/
警告一覧 下記のコマンドを実行すると、警告の適用有無が出力される。
gcc --help=warnings -Q    警告 なし -Wall -Wextra 両方     &amp;ndash;all-warnings       &amp;ndash;extra-warnings       -W       -Wabi x x x x   -Wabi-tag x x x x   -Wabi=       -Wabsolute-value x x o o   -Waddress x o x o   -Waddress-of-packed-member o o o o   -Waggregate-return x x x x   -Waggressive-loop-optimizations o o o o   -Waliasing x x x x   -Walign-commons o o o o   -Waligned-new=[none|global|all] none none none none   -Wall       -Walloc-size-larger-than= -1 -1 -1 -1   -Walloc-zero x x x x   -Walloca x x x x   -Walloca-larger-than= -1 -1 -1 -1   -Wampersand x x x x   -Wargument-mismatch o o o o   -Warray-bounds x o x o   -Warray-bounds=&amp;lt;0,2&amp;gt; 0 1 0 1   -Warray-temporaries x x x x   -Wassign-intercept x x x x   -Wattribute-alias       -Wattribute-alias=&amp;lt;0,2&amp;gt; 1 1 1 1   -Wattribute-warning o o o o   -Wattributes o o o o   -Wbad-function-cast x x x x   -Wbool-compare x o x o   -Wbool-operation x o x o   -Wbuiltin-declaration-mismatch o o o o   -Wbuiltin-macro-redefined o o o o   -Wc++-compat x x x x   -Wc++0x-compat       -Wc++11-compat x x x x   -Wc++14-compat x x x x   -Wc++17-compat x x x x   -Wc++1z-compat       -Wc-binding-type x x x x   -Wc11-c2x-compat o o o o   -Wc90-c99-compat o o o o   -Wc99-c11-compat o o o o   -Wcannot-profile o o o o   -Wcast-align x x x x   -Wcast-align=strict x x x x   -Wcast-function-type x x o o   -Wcast-qual x x x x   -Wcast-result x x x x   -Wcatch-value       -Wcatch-value=&amp;lt;0,3&amp;gt; 0 0 0 0   -Wchar-subscripts x o x o   -Wcharacter-truncation x x x x   -Wchkp       -Wclass-conversion o o o o   -Wclass-memaccess x x x x   -Wclobbered x x o o   -Wcomment x o x o   -Wcomments       -Wcompare-reals x x x x   -Wconditionally-supported x x x x   -Wconversion x x x x   -Wconversion-extra x x x x   -Wconversion-null o o o o   -Wcoverage-mismatch o o o o   -Wcpp o o o o   -Wctor-dtor-privacy x x x x   -Wdangling-else x o x o   -Wdate-time x x x x   -Wdeclaration-after-statement o o o o   -Wdelete-incomplete o o o o   -Wdelete-non-virtual-dtor x x x x   -Wdeprecated o o o o   -Wdeprecated-copy x x x x   -Wdeprecated-copy-dtor x x x x   -Wdeprecated-declarations o o o o   -Wdesignated-init o o o o   -Wdisabled-optimization x x x x   -Wdiscarded-array-qualifiers o o o o   -Wdiscarded-qualifiers o o o o   -Wdiv-by-zero o o o o   -Wdo-subscript x x x x   -Wdouble-promotion x x x x   -Wduplicate-decl-specifier x o x o   -Wduplicated-branches x x x x   -Wduplicated-cond x x x x   -Weffc++ x x x x   -Wempty-body x x o o   -Wendif-labels o o o o   -Wenum-compare o o o o   -Werror-implicit-function-declaration       -Wexpansion-to-defined x x o o   -Wextra x x o o   -Wextra-semi x x x x   -Wfloat-conversion x x x x   -Wfloat-equal x x x x   -Wformat       -Wformat-contains-nul x o x o   -Wformat-extra-args x o x o   -Wformat-nonliteral x x x x   -Wformat-overflow&amp;lt;0,2&amp;gt;       -Wformat-overflow=&amp;lt;0,2&amp;gt; 0 1 0 1   -Wformat-security x x x x   -Wformat-signedness x x x x   -Wformat-truncation       -Wformat-truncation=&amp;lt;0,2&amp;gt; 0 1 0 1   -Wformat-y2k x x x x   -Wformat-zero-length x o x o   -Wformat=&amp;lt;0,2&amp;gt; 0 1 0 1   -Wframe-address x o x o   -Wframe-larger-than= -1 -1 -1 -1   -Wfree-nonheap-object o o o o   -Wfunction-elimination x x x x   -Whsa o o o o   -Wif-not-aligned o o o o   -Wignored-attributes o o o o   -Wignored-qualifiers x x o o   -Wimplicit x o x o   -Wimplicit-fallthrough       -Wimplicit-fallthrough=&amp;lt;0,5&amp;gt; 0 0 3 3   -Wimplicit-function-declaration o o o o   -Wimplicit-int o o o o   -Wimplicit-interface x x x x   -Wimplicit-procedure x x x x   -Wincompatible-pointer-types o o o o   -Winherited-variadic-ctor o o o o   -Winit-list-lifetime o o o o   -Winit-self x x x x   -Winline x x x x   -Wint-conversion o o o o   -Wint-in-bool-context x o x o   -Wint-to-pointer-cast o o o o   -Winteger-division x x x x   -Wintrinsic-shadow x x x x   -Wintrinsics-std x x x x   -Winvalid-memory-model o o o o   -Winvalid-offsetof o o o o   -Winvalid-pch x x x x   -Wjump-misses-init x x x x   -Wlarger-than-       -Wlarger-than= -1 -1 -1 -1   -Wline-truncation o o o o   -Wliteral-suffix o o o o   -Wlogical-not-parentheses x o x o   -Wlogical-op x x x x   -Wlong-long o o o o   -Wlto-type-mismatch o o o o   -Wmain o o o o   -Wmaybe-uninitialized x o o o   -Wmemset-elt-size x o x o   -Wmemset-transposed-args x o x o   -Wmisleading-indentation x o x o   -Wmissing-attributes x o x o   -Wmissing-braces x o x o   -Wmissing-declarations x x x x   -Wmissing-field-initializers x x o o   -Wmissing-format-attribute       -Wmissing-include-dirs x x x x   -Wmissing-noreturn       -Wmissing-parameter-type x x o o   -Wmissing-profile o o o o   -Wmissing-prototypes x x x x   -Wmultichar x x x x   -Wmultiple-inheritance x x x x   -Wmultistatement-macros x o x o   -Wnamespaces x x x x   -Wnarrowing o o o o   -Wnested-externs x x x x   -Wno-alloc-size-larger-than       -Wno-alloca-larger-than       -Wno-vla-larger-than       -Wnoexcept x x x x   -Wnoexcept-type x x x x   -Wnon-template-friend o o o o   -Wnon-virtual-dtor x x x x   -Wnonnull x o x o   -Wnonnull-compare x o x o   -Wnormalized       -Wnormalized=[none|id|nfc|nfkc] nfc nfc nfc nfc   -Wnull-dereference x x x x   -Wodr o o o o   -Wold-style-cast x x x x   -Wold-style-declaration x x o o   -Wold-style-definition x x x x   -Wopenmp-simd x o x o   -Woverflow o o o o   -Woverlength-strings x x x x   -Woverloaded-virtual x x x x   -Woverride-init x x o o   -Woverride-init-side-effects o o o o   -Wpacked x x x x   -Wpacked-bitfield-compat o o o o   -Wpacked-not-aligned x o x o   -Wpadded x x x x   -Wparentheses x o x o   -Wpedantic x x x x   -Wpessimizing-move x x x x   -Wplacement-new       -Wplacement-new=&amp;lt;0,2&amp;gt; -1 -1 -1 -1   -Wpmf-conversions o o o o   -Wpointer-arith x x x x   -Wpointer-compare o o o o   -Wpointer-sign x o x o   -Wpointer-to-int-cast o o o o   -Wpragmas o o o o   -Wprio-ctor-dtor o o o o   -Wproperty-assign-default o o o o   -Wprotocol o o o o   -Wpsabi o o o o   -Wreal-q-constant x x x x   -Wrealloc-lhs x x x x   -Wrealloc-lhs-all x x x x   -Wredundant-decls x x x x   -Wredundant-move x x x x   -Wregister x x x x   -Wreorder x x x x   -Wrestrict x o x o   -Wreturn-local-addr o o o o   -Wreturn-type o o o o   -Wscalar-storage-order       -Wselector x x x x   -Wsequence-point x o x o   -Wshadow x x x x   -Wshadow-compatible-local       -Wshadow-ivar o o o o   -Wshadow-local       -Wshadow=compatible-local x x x x   -Wshadow=global       -Wshadow=local x x x x   -Wshift-count-negative o o o o   -Wshift-count-overflow o o o o   -Wshift-negative-value o o o o   -Wshift-overflow       -Wshift-overflow=&amp;lt;0,2&amp;gt; -1 -1 -1 -1   -Wsign-compare x x o o   -Wsign-conversion x x x x   -Wsign-promo x x x x   -Wsized-deallocation x x o o   -Wsizeof-array-argument o o o o   -Wsizeof-pointer-div x o x o   -Wsizeof-pointer-memaccess x o x o   -Wstack-protector x x x x   -Wstack-usage= -1 -1 -1 -1   -Wstrict-aliasing       -Wstrict-aliasing=&amp;lt;0,3&amp;gt; 0 3 0 3   -Wstrict-null-sentinel x x x x   -Wstrict-overflow       -Wstrict-overflow=&amp;lt;0,5&amp;gt; 0 1 0 1   -Wstrict-prototypes x x x x   -Wstrict-selector-match x x x x   -Wstringop-overflow       -Wstringop-overflow=&amp;lt;0,4&amp;gt; 2 2 2 2   -Wstringop-truncation x o x o   -Wsubobject-linkage o o o o   -Wsuggest-attribute=cold x x x x   -Wsuggest-attribute=const x x x x   -Wsuggest-attribute=format x x x x   -Wsuggest-attribute=malloc x x x x   -Wsuggest-attribute=noreturn x x x x   -Wsuggest-attribute=pure x x x x   -Wsuggest-final-methods x x x x   -Wsuggest-final-types x x x x   -Wsuggest-override x x x x   -Wsurprising x x x x   -Wswitch x o x o   -Wswitch-bool o o o o   -Wswitch-default x x x x   -Wswitch-enum x x x x   -Wswitch-unreachable o o o o   -Wsync-nand o o o o   -Wsynth x x x x   -Wsystem-headers x x x x   -Wtabs x x x x   -Wtarget-lifetime x x x x   -Wtautological-compare x o x o   -Wtemplates x x x x   -Wterminate o o o o   -Wtraditional x x x x   -Wtraditional-conversion x x x x   -Wtrampolines x x x x   -Wtrigraphs o o o o   -Wtype-limits x x o o   -Wundeclared-selector x x x x   -Wundef x x x x   -Wundefined-do-loop x x x x   -Wunderflow o o o o   -Wuninitialized x o o o   -Wunknown-pragmas x o x o   -Wunreachable-code       -Wunsafe-loop-optimizations       -Wunsuffixed-float-constants x x x x   -Wunused x o x o   -Wunused-but-set-parameter x x x o   -Wunused-but-set-variable x o x o   -Wunused-const-variable       -Wunused-const-variable=&amp;lt;0,2&amp;gt; 0 1 0 1   -Wunused-dummy-argument x x x x   -Wunused-function x o x o   -Wunused-label x o x o   -Wunused-local-typedefs x o x o   -Wunused-macros x x x x   -Wunused-parameter x x x o   -Wunused-result o o o o   -Wunused-value x o x o   -Wunused-variable x o x o   -Wuse-without-only x x x x   -Wuseless-cast x x x x   -Wvarargs o o o o   -Wvariadic-macros x x x x   -Wvector-operation-performance x x x x   -Wvirtual-inheritance x x x x   -Wvirtual-move-assign o o o o   -Wvla o o o o   -Wvla-larger-than= -1 -1 -1 -1   -Wvolatile-register-var x o x o   -Wwrite-strings x x x x   -Wzero-as-null-pointer-constant x x x x   -Wzerotrip x x x x   -frequire-return-statement o o o o    -Wabsolute-value より適切な標準関数が使用可能な場合に、引数の絶対値を計算する標準関数の呼び出しについて警告する。 たとえば、abs（3.</description>
    </item>
    
    <item>
      <title>アライメント</title>
      <link>https://tonboAkinori.github.io/hugo-memo/other/001-align/</link>
      <pubDate>Tue, 29 Dec 2020 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/other/001-align/</guid>
      <description>アライメントによって、例外が発生したためその理由をネットで調べた時のメモ。
CPU に起因する問題 プログラミング言語ではなく、CPUに起因する問題。 特に、データのメモリアドレスに関する制約と言える。
アライメントとは PCUとメモリ間のデータやり取りは、データバスで行われる。 32ビットCPUでは、データを一度に32ビット読み書きできることが多い。 ただし、NビットCPUのデータバス幅がNビットであるとは限らない。 このため、メモリの最初の4バイト、次の４バイト、その次の4バイト、、、と続き、 この単位での4バイトは一度に読み書きできることになる。
よって、４バイト整数をメモリに格納する場合、先頭アドレスが4の倍数になるようにすれば、 1回のメモリアクセスで読み書きができる。 このデータの先頭アドレスを4の倍数にすることを、4バイト境界にアラインするという。</description>
    </item>
    
    <item>
      <title>find</title>
      <link>https://tonboAkinori.github.io/hugo-memo/command/001-find/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/command/001-find/</guid>
      <description>ディレクトリやファイルの再帰的な検索
find &amp;lt;検索位置&amp;gt; &amp;lt;expression&amp;gt; 検索を試したディレクトリ構造
. ├── 001 │ ├── 001-01 │ │ └── 001-01.txt │ └── 001-02 ├── 002 └── 003 └── 003.txt 通常 $ find . . ./001 ./001/001-01 ./001/001-01/001-01.txt ./001/001-02 ./002 ./003 ./003/003.txt ファイルタイプを指定 タイプで指定できる一覧。
   タイプ 内容     b ブロック(バッファー)特別   c 文字(バッファーなし)特別   d ディレクトリ   p 名前付きパイプ   f 標準ファイル   l シンボリックリンク   s ソケット    1 2 3 4 5 6 7  $ find .</description>
    </item>
    
    <item>
      <title>基本文法</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/001-makefile/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/001-makefile/</guid>
      <description>Makefileの基本的な文法は下記になる
ターゲット：コンポーネント コマンド(コンポーネントからターゲット作成する方法を記述する) Makefileの文法確認 (1) [sub.h] #ifndef __INCLUDE_SUB_H_  #define __INCLUDE_SUB_H_  void Greeting(char* str); #endif // __INCLUDE_SUB_H_ [sub.c] #include &amp;lt;stdio.h&amp;gt; #include &amp;#34;sub.h&amp;#34; void Greeting(char* str) { printf(&amp;#34;&amp;gt; %s\n&amp;#34;, str); } [main.c] #include &amp;#34;sub.h&amp;#34; void main(void) { Greeting(&amp;#34;Hello world!&amp;#34;); } [Makefile] TARGET = app #CC = OBJS = main.o sub.o ${TARGET}: ${OBJS} ${CC} -o ${TARGET} ${OBJS} main.o: main.c ${CC} -c main.c sub.o: sub.c ${CC} -c sub.c clean: ${RM} *~ *.o ${TARGET} ■実行結果 $make cc -c main.</description>
    </item>
    
    <item>
      <title>リンクまでの流れ</title>
      <link>https://tonboAkinori.github.io/hugo-memo/linker/link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/linker/link/</guid>
      <description>通常のコンパイラは、ファイル単位でコンパイルし「オブジェクトファイル」と呼ばれるファイルを作成する。
最終的にオブジェクトファイルが結合されるときに、実際の関数呼び出しに置き換えられる。
この結合作業を「リンク」と呼ぶ。
スタートアップルーチン 標準ライブラリの関数が利用されていない場合でも、 実行できる形式にするために スタートアップルーチン と呼ばれる初期化を行うプログラムがリンクされる。
スタートアップルーチンでは、レジスタの初期化や main 関数への引数設定や各種初期化が行われる。 プログラムで最初に実行されるのは、main 関数ではなくスタートアップルーチンである。</description>
    </item>
    
    <item>
      <title>GCCでリンクまでの処理確認</title>
      <link>https://tonboAkinori.github.io/hugo-memo/linker/link_gcc/</link>
      <pubDate>Sat, 02 Oct 2021 02:55:17 +0000</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/linker/link_gcc/</guid>
      <description>gcc は指定されたファイルを読み込み、ファイルの形式に応じて下記の作業を順番に行う。
本当の意味でのコンパイラは cc1 であり、このため gcc は 「コンパイラドライバー」 とも呼ばれる。
 プリプロセス (ccp1) コンパイル (ccp1) アセンブル (as) リンク (collect2)  gccで-v オプションを指定するとgccが行う処理の詳細が出力される。
$ gcc -v main.c Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/9/lto-wrapper OFFLOAD_TARGET_NAMES=nvptx-none:hsa OFFLOAD_TARGET_DEFAULT=1 Target: x86_64-linux-gnu Configured with: ../src/configure -v --with-pkgversion=&amp;#39;Ubuntu 9.3.0-17ubuntu1~20.04&amp;#39; --with-bugurl=file:///usr/share/doc/gcc-9/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,gm2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-9 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-9-HskZEa/gcc-9-9.</description>
    </item>
    
    <item>
      <title>awk</title>
      <link>https://tonboAkinori.github.io/hugo-memo/command/002-awk/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/command/002-awk/</guid>
      <description>空白やタブで区切られたテキストを処理するコマンド。 演算機能もあり、プログラミング言語としても使用される。
基本構文 awk &amp;#39; BEGIN{ 最初に実行されるブロック } { メインブロック } END{ 最後に実行されるブロック } &amp;#39; 処理するファイルの内容は下記とする。
A 1 A B 2 C D 3 D E 1 E $ awk &amp;#39;BEGIN{print &amp;#34;=== Start ===&amp;#34;}{print $0}END{print &amp;#34;=== End ===&amp;#34;}&amp;#39; test.txt === Start === A 1 A B 2 C D 3 D E 1 E === End === スクリプトの読み込み -f でスクリプトを指定する。
BEGIN{ print &amp;#34;START&amp;#34; } { print &amp;#34;---&amp;#34; print $0 } END{ print &amp;#34;END&amp;#34; } $ awk -f スクリプトファイル test.</description>
    </item>
    
    <item>
      <title>マクロ</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/002-makefile-macro/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/002-makefile-macro/</guid>
      <description>make も予め定義されたマクロがあり使うことが出来る。 下記のコマンドでマクロを確認できる
$ make -p  ただし、 Makefile のある場所で実施すると Makefile の定義が反映されるので注意  マクロの優先順位 参照できるマクロが複数あるため優先順位は意識すること。 優先順位が高い順に並べる。
 コマンドラインで定義されたもの Makefile 内で定義されたもの　 環境変数 makeで予め定義されているもの  マクロ文字列の置換 マクロ文字列を使うと簡単にファイル名などを変更することが可能。 下記では、${SRCS:.c=.o} で SRCS の .c を .o に変更している
[Makefile] TARGET = app SRCS = main.c sub.c OBJS = ${SRCS:.c=.o} ${TARGET}: ${OBJS} ${CC} -o ${TARGET} ${OBJS} main.o: main.c ${CC} -c main.c sub.o: sub.c ${CC} -c sub.c sub.o: sub.h clean: ${RM} *~ *.o ${TARGET} </description>
    </item>
    
    <item>
      <title>自動変数</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/003-makefile-auto-variable/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/003-makefile-auto-variable/</guid>
      <description>自動変数 内容 有効範囲     $@ 処理中ターゲット コマンド行で有効   $% ターゲットがアーカイブメンバのときのターゲットメンバ名    $&amp;lt; 最初に記載した依存ファイルの名前 (ヘッダをソースより後ろに配置することでヘッダの更新に使える)    $^ 依存しているすべてのファイル    $? ターゲットよりタイムスタンプが新しい依存ファイル    $$@ 処理中のターゲット コンポーネントのみで使える    [Makefile] TARGET = app SRCS = main.c sub.c OBJS = ${SRCS:.c=.o} ${TARGET}: ${OBJS} ${CC} -o $@ ${OBJS} main.o: main.c ${CC} -c $? sub.o: sub.c ${CC} -c $? sub.o: sub.</description>
    </item>
    
    <item>
      <title>スタートアップルーチン</title>
      <link>https://tonboAkinori.github.io/hugo-memo/linker/startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/linker/startup/</guid>
      <description>標準ライブラリの関数が利用されていない場合でも、 実行できる形式にするために スタートアップルーチン と呼ばれる初期化を行うプログラムがリンクされる。
スタートアップルーチンでは、レジスタの初期化や main 関数への引数設定や各種初期化が行われる。
プログラムで最初に実行されるのは、main 関数ではなくスタートアップルーチンである。</description>
    </item>
    
    <item>
      <title>複数ターゲット</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/004-makefile-multi-target/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/004-makefile-multi-target/</guid>
      <description>複数ターゲットを指定するとどうなるか確認してみた。
下記の場合は、最初のターゲット(app)のみがビルドされた。
TARGET = app hoge SRCS = main.c sub.c OBJS = ${SRCS:.c=.o} ${TARGET}: ${OBJS} ${CC} -o $@ ${OBJS} main.o: main.c ${CC} -c main.c sub.o: sub.c ${CC} -c sub.c sub.o: sub.h clean: ${RM} *~ *.o ${TARGET} ■実行結果 $ make cc -c main.c cc -c sub.c cc -o app main.o sub.o $ make hoge cc -o hoge main.o sub.o all ターゲットを作成することで、どちらもビルドされた。
[Makefile] TARGET = app hoge SRCS = main.c sub.c OBJS = ${SRCS:.</description>
    </item>
    
    <item>
      <title>コマンドオプション</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/005-makefile-option/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/005-makefile-option/</guid>
      <description>オプションから変数を指定することもできる。
make -p makefile を読み込んで得られたデータベース　(規則と変数の値) を出力する。
make -n 実行するコマンドの表示だけを行う。
変数に値を設定する $ make CFLAGS=-g cc -g -c -o main.o main.c cc -g -c -o sub.o sub.c cc -g -o app main.o sub.o $ make &amp;#34;CFLAGS=-g -DDEBUG&amp;#34; cc -g -DDEBUG -c -o main.o main.c cc -g -DDEBUG -c -o sub.o sub.c cc -g -DDEBUG -o app main.o sub.o 複数のオプションを設定する場合 $ make CFLAGS=-g LIB=-l cc -g -c -o main.o main.c cc -g -c -o sub.</description>
    </item>
    
    <item>
      <title>ヘッダファイル</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/006-makefile-header/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/006-makefile-header/</guid>
      <description>ヘッダファイルの依存に対応する ヘッダファイルの更新でビルドされる Makefile を作成する。
[sub_a.h] #ifndef __INCLUDE__SUB_A  #define __INCLUDE__SUB_A  void sub_a(void); void sub_A(void); #endif // __INCLUDE__SUB_A [sub_b.h] #ifndef __INCLUDE__SUB_B  #define __INCLUDE__SUB_B  void sub_b(void); #endif // __INCLUDE__SUB_B [sub_ab.c] #include &amp;lt;stdio.h&amp;gt; #include &amp;#34;sub_a.h&amp;#34; #include &amp;#34;sub_b.h&amp;#34; void sub_a(void) { printf(&amp;#34;&amp;gt; Call sub_a\n&amp;#34;); } void sub_b(void) { printf(&amp;#34;&amp;gt; Call sub_b\n&amp;#34;); } [parse.h] #ifndef __INCLUDE__PARSE_H  #define __INCLUDE__PARSE_H  void parse(void); #endif // __INCLUDE__PARSE_H [parse.c] #include &amp;lt;stdio.h&amp;gt; #include &amp;#34;parse.h&amp;#34; void parse(void) { printf(&amp;#34;&amp;gt; Call parse\n&amp;#34;); } [main.</description>
    </item>
    
    <item>
      <title>多段 Make</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/007-makefile-multi-make/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/007-makefile-multi-make/</guid>
      <description>とりあえずベタ書き。 シェルコマンドを使えばより簡単に書ける。
. ├── Makefile ├── include │ ├── codec │ │ └── codec.h │ └── ui │ └── ui.h ├── lib │ ├── codec │ │ ├── Makefile │ │ └── codec.c │ └── ui │ ├── Makefile │ └── ui.c └── main.c [Makefile] TARGET := app SUB_TARGET := ui codec LIB_UI_DIR := lib/ui #lib/uiのソースコードを探索 LIB_UI_SRC := $(shell find ${LIB_UI_DIR} -type f -name \*.c) LIB_UI_OBJS := ${LIB_UI_SRC:.c=.o} LIB_CODEC_DIR = lib/codec #lib/codecのソースコード探索 LIB_CODEC_SRC := $(shell find ${LIB_CODEC_DIR} -type f -name \*.</description>
    </item>
    
    <item>
      <title>代入演算子</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/008-makefile-assign-operate/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/008-makefile-assign-operate/</guid>
      <description>makeで使うことのできる演算子を記載する。
   演算子 内容     = 変数が使われる度に評価される。シェルコマンドを代入している場合、変数を使う度に評価される。   := 一度だけ評価するため、定数として使える。   ?= 変数が定義されていないときのみ := として機能する   += 加算代入演算子。    </description>
    </item>
    
    <item>
      <title>変数</title>
      <link>https://tonboAkinori.github.io/hugo-memo/makefile/009-makefile-variables/</link>
      <pubDate>Sat, 29 Dec 2018 11:02:05 +0600</pubDate>
      
      <guid>https://tonboAkinori.github.io/hugo-memo/makefile/009-makefile-variables/</guid>
      <description>   自動変数 内容     CFLAGS Cコンパイラに与える追加のフラグ   CXXFLAGS C++コンパイラに与える追加のフラグ   CPPFLAGS Cプリプロセッサに与える追加フラグ、プログラムに使われる。   LDFLAGS -Lのようなリンカーを実行をサポートする時にコンパイラに与えられる追加フラグ。代わりにライブラリ(-lfoo)は LDLIBS 変数に追加するべき。   LDLIBS ライブラリフラグや名前をコンパイラに与える、リンカーが実行される時にサポートする。 -Lのようなライブラリではないリンカーフラグは LDFLAGS 変数に与える。    </description>
    </item>
    
  </channel>
</rss>
